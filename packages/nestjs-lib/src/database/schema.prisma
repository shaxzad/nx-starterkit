generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Represents a tenant (e.g., an organization or company)
model Tenant {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  branches    Branch[]
  invitations Invitation[]
  users       User[]
}

// Represents a branch under a tenant (e.g., headquarters, regional offices)
model Branch {
  id          String   @id @default(uuid())
  name        String
  description String?
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenant          Tenant           @relation(fields: [tenantId], references: [id])
  userBranchRoles UserBranchRole[]
  invitations     Invitation[]
  users           User[]
}

// Represents a user who belongs to a tenant and can be assigned to branches
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String?  @unique
  password  String?
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  tenantId        String
  tenant          Tenant           @relation(fields: [tenantId], references: [id])
  userBranchRoles UserBranchRole[]
  invitations     Invitation[]
  profile         Profile?
  profileId       String?          @unique
  branchId        String
  branch          Branch           @relation(fields: [branchId], references: [id])
}

// Represents a user profile with additional details
model Profile {
  id        String   @id @default(uuid())
  bio       String?
  pictureId String?
  picture   Picture? @relation(fields: [pictureId], references: [id])
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Represents a picture (e.g., profile picture, branch logo)
model Picture {
  id          String   @id @default(uuid())
  url         String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  profiles Profile[]
}

// Represents the association between a user, a branch, and a role
model UserBranchRole {
  id       String @id @default(uuid())
  userId   String
  branchId String
  roleId   String

  // Relationships
  user   User   @relation(fields: [userId], references: [id])
  branch Branch @relation(fields: [branchId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  // Ensure unique combination of user and branch
  @@unique([userId, branchId])
}

// Represents an invitation to join a specific branch under a tenant
model Invitation {
  id        String           @id @default(uuid())
  email     String
  token     String           @unique
  branchId  String
  tenantId  String
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relationships
  branch Branch  @relation(fields: [branchId], references: [id])
  tenant Tenant  @relation(fields: [tenantId], references: [id])
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // Ensure unique combination of email and branch
  @@unique([email, branchId])
}

// Represents a role (e.g., admin, manager, user)
model Role {
  id   String @id @default(uuid())
  name String @unique

  // Relationships
  userBranchRoles UserBranchRole[]
}

// Represents the status of an invitation
enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}
